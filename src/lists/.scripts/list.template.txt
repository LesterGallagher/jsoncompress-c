#include <stdlib.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdio.h>
#include "${typeHyphen}-list.h"

${typeUnderscore}_list_t *${typeUnderscore}_list_new(unsigned int initialLength) {
    ${typeUnderscore}_list_t *list = (${typeUnderscore}_list_t*)malloc(sizeof(${typeUnderscore}_list_t));
    list->array = (${innerType}*)malloc(sizeof(${innerType}) * initialLength);
    list->allocated = initialLength;
    list->count = 0;
    return list;
}

void ${typeUnderscore}_list_free(${typeUnderscore}_list_t *list) {
    free(list->array);
    free(list);
}

void ${typeUnderscore}_list_add(${typeUnderscore}_list_t *self, ${innerType} value) {
    if (self->count >= self->allocated) {
        self->allocated *= 2;
        self->array = realloc(self->array, sizeof(${innerType}) * self->allocated);
    }
    self->array[self->count++] = value;
}

${innerType} ${typeUnderscore}_list_at_index(${typeUnderscore}_list_t *self, unsigned int index) {
    return self->array[index];
}

void ${typeUnderscore}_list_trim(${typeUnderscore}_list_t *self) {
    if (self->allocated == self->count) return;
    self->allocated = self->count;
    self->array = realloc(self->array, sizeof(${innerType}) * self->allocated);
}

void ${typeUnderscore}_list_trim(${typeUnderscore}_list_t *self) {
    if (self->allocated == self->count) return;
    self->allocated = self->count;
    self->array = realloc(self->array, sizeof(${typeUnderscore}) * self->allocated);
}

${typeUnderscore}_list_t *${typeUnderscore}_list_clone(${typeUnderscore}_list_t *self) {
    ${typeUnderscore}_list_t *new = ${typeUnderscore}_list_new(self->count);
    new->count = self->count;
    new->allocated = self->count;
    new->offset = 0;
    memcpy(
        new->array, 
        self->array, 
        self->count * sizeof(${typeUnderscore}));
    return new;
}

void ${typeUnderscore}_list_sort(${typeUnderscore}_list_t *self, ${typeUnderscore}_list_sort_cb_t sort_cb) {
    int (*func_ptr)(const void*, const void*);
    func_ptr = (int (*)(const void*, const void*))sort_cb;

    qsort(
        self->array + self->offset * sizeof(${typeUnderscore}), 
        self->count, 
        sizeof(${typeUnderscore}), 
        func_ptr);
}


